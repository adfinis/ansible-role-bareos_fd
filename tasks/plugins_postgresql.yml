---

- name: plugins_postgresql | Determine postgresql version for Debian/Ubuntu
  when:
    - ansible_facts.os_family == "Debian"
  block:
    - name: plugins_postgresql | Fetch postgresql version
      ansible.builtin.command:
        cmd: "pg_config --version"
      changed_when: false
      check_mode: false
      register: _psql_version
      # stdout example: "PostgreSQL 14.11 (Ubuntu 14.11-0ubuntu0.22.04.1)""

    # var is used by `bareos_fd_plugin_psql_root_dir`in vars/<Distro>.yml
    # to determine file location for configs (Debian/Ubuntu).
    - name: plugins_postgresql | Register postgresql major version
      ansible.builtin.set_fact:
        bareos_fd_plugin_psql_version: "{{ ((_psql_version.stdout | split)[1] | split('.'))[0] }}"

    - name: plugins_postgresql | Validate version number
      ansible.builtin.assert:
        that:
          - ( bareos_fd_plugin_psql_version | int) is number

- name: plugins_postgresql | Install psycopg for community.postgresql
  ansible.builtin.package:
    name: python3-psycopg2
    state: present
  when:
    - ansible_facts.os_family != "Suse"

- name: plugins_postgresql | Install psycopg for community.postgresql (Suse)
  ansible.builtin.package:
    name: python311-psycopg2  # python3 module is required on SUSE <=15
    state: present
  when:
    - ansible_facts.os_family == "Suse"

- name: plugins_postgresql | Make sure psql root user is present
  community.postgresql.postgresql_user:
    name: root
    no_password_changes: true
    role_attr_flags: SUPERUSER
  become: true
  become_user: postgres

- name: plugins_postgresql | Enable local peer access for root user
  ansible.builtin.lineinfile:
    path: "{{ bareos_fd_plugin_psql_config_hba }}"
    line: >-
      local all root peer  # Ansible managed:
      Do NOT remove line manually! Managed by bareos_fd role
    regexp: '^local\s+all\s+root\s+peer'  # match for any amount of spaces
    state: present
    backup: true
  notify: Reload postgresql

- name: plugins_postgresql | Make sure WAL archive dir is present
  ansible.builtin.file:
    state: directory
    owner: postgres
    group: postgres
    mode: "0751"
    path: "{{ bareos_fd_plugin_psql_wal_archive }}"

- name: plugins_postgresql | Make sure postgresql conf.d dir is present
  ansible.builtin.file:
    state: directory
    owner: postgres
    group: postgres
    mode: "0755"
    path: "{{ bareos_fd_plugin_psql_root_dir }}/conf.d"

- name: plugins_postgresql | Include conf.d dir in postgresql.conf
  ansible.builtin.lineinfile:
    path: "{{ bareos_fd_plugin_psql_config }}"
    line: >-
      include_dir = 'conf.d'    # Ansible managed:
      Do NOT remove line manually! Managed by bareos_fd role
    regexp: '^#?(\s+)?include_dir'  # match also commented line
    state: present
    backup: true
  notify:
    - Reload postgresql
    - PostgreSQL archive_mode info

- name: plugins_postgresql | Deploy config for wal archive mode
  ansible.builtin.template:
    src: "templates/plugin_postgresql_bareos_wal_archive.conf.j2"
    dest: "{{ bareos_fd_plugin_psql_root_dir }}/conf.d/bareos_postgresql_wal_archive.conf"
    backup: true
    owner: root
    group: root
    mode: "0644"
  notify:
    - Reload postgresql
    - PostgreSQL archive_mode info

- name: plugins_postgresql | Create plugin_defaults file
  ansible.builtin.template:
    src: "templates/plugin_postgresql_defaults.ini.j2"
    dest: "/etc/bareos/bareos-fd.d/plugin_postgresql_defaults.ini"
    backup: true
    owner: root
    group: root
    mode: "0644"

- name: plugins_postgresql | WAL archive cleanup
  when:
    - bareos_fd_plugin_psql_wal_cleanup_enable
  block:
    - name: plugins_postgresql | Deploy before and after scripts
      ansible.builtin.template:
        src: "templates/bareos-psql-{{ item }}-script.sh.j2"
        dest: "/usr/local/bin/bareos-psql-{{ item }}.sh"
        owner: root
        group: root
        mode: "0751"
      loop:
        - before
        - after
